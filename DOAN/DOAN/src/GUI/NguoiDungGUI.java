package GUI;

import DAO.SanPhamDAO;
import DTO.SanPhamDTO;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class NguoiDungGUI extends JFrame {

    private JPanel productDisplayPanel;
    private JPanel contentPanel;
    private JTextField searchField;

    class BackgroundPanel extends JPanel {
        private final Image backgroundImage;

        public BackgroundPanel(String imagePath) {
            ImageIcon icon = new ImageIcon(getClass().getResource("/images/" + imagePath));
            backgroundImage = icon.getImage();
            if (backgroundImage == null || icon.getIconWidth() == -1) {
                System.err.println("L·ªói: Kh√¥ng t√¨m th·∫•y ·∫£nh n·ªÅn t·∫°i /images/" + imagePath);
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (backgroundImage != null) {
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            } else {
                g.setColor(Color.LIGHT_GRAY);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        }
    }

    public NguoiDungGUI() {
        setTitle("Fashion Store - Ng∆∞·ªùi D√πng");
        setSize(1000, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panel Header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(160, 250, 160));
        headerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Logo
        JLabel logoLabel = new JLabel("SSS", SwingConstants.CENTER);
        logoLabel.setFont(new Font("Serif", Font.BOLD, 30));

        headerPanel.add(logoLabel, BorderLayout.CENTER);

        // Menu Panel
        JPanel menuPanel = new JPanel();
        menuPanel.setBackground(Color.WHITE);
        menuPanel.setPreferredSize(new Dimension(1000, 50));
        menuPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));

        // N√∫t Trang Ch·ªß
        JButton homeButton = new JButton("Trang ch·ªß");
        homeButton.setBackground(new Color(100, 200, 100));
        homeButton.setForeground(Color.WHITE);
        homeButton.setFont(new Font("Serif", Font.PLAIN, 18));
        homeButton.setPreferredSize(new Dimension(120, 30));
        homeButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        homeButton.addActionListener(e -> setContent(new JScrollPane(productDisplayPanel)));
        menuPanel.add(homeButton);

        // C√°c n√∫t ch·ª©c nƒÉng
        String[] menuItems = {"Hot trend", "Blog", "CSKH"};
        for (String item : menuItems) {
            JButton menuButton = new JButton(item);
            menuButton.setFont(new Font("Serif", Font.PLAIN, 18));
            menuButton.setBackground(new Color(100, 200, 100));
            menuButton.setForeground(Color.WHITE);
            menuButton.setPreferredSize(new Dimension(120, 30));
            menuButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            menuPanel.add(menuButton);

            if (item.equals("Hot trend")) {
                menuButton.addActionListener(e -> showHotTrendContent());
            } else if (item.equals("Blog")) {
                menuButton.addActionListener(e -> showBlogContent());
            } else if (item.equals("CSKH")) {
                menuButton.addActionListener(e -> showCSKHContent());
            }
        }

        // ComboBox danh m·ª•c
        String[] categories = {"Ch·ªçn danh m·ª•c", "Qu·∫ßn √Åo", "Gi√†y D√©p", "Ph·ª• Ki·ªán"};
        JComboBox<String> categoryComboBox = new JComboBox<>(categories);
        categoryComboBox.setFont(new Font("Serif", Font.PLAIN, 16));
        categoryComboBox.setBackground(new Color(100, 200, 100));
        categoryComboBox.setForeground(Color.WHITE);
        categoryComboBox.setPreferredSize(new Dimension(150, 30));
        categoryComboBox.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        menuPanel.add(categoryComboBox);

        categoryComboBox.addActionListener(e -> {
            String selected = (String) categoryComboBox.getSelectedItem();
            if ("Qu·∫ßn √Åo".equals(selected)) showQuanAoGUI();
            else if ("Gi√†y D√©p".equals(selected)) showGiayDepGUI();
            else if ("Ph·ª• Ki·ªán".equals(selected)) showPhuKienGUI();
        });

        // Search
        searchField = new JTextField(15);
        searchField.setFont(new Font("Serif", Font.PLAIN, 16));
        searchField.setMaximumSize(new Dimension(200, 30));
        JButton searchButton = new JButton("üîç");
        searchButton.setBackground(new Color(100, 200, 100));
        searchButton.setForeground(Color.WHITE);
        searchButton.setPreferredSize(new Dimension(40, 30));
        searchButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        menuPanel.add(searchField);
        menuPanel.add(searchButton);

        // Log ƒë·ªÉ ki·ªÉm tra
        System.out.println("ƒê√£ th√™m searchField, searchButton v√†o menuPanel");

        // H√†nh ƒë·ªông t√¨m ki·∫øm
        searchButton.addActionListener(e -> searchProducts());

        // Top panel ch·ª©a header v√† menu
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(headerPanel, BorderLayout.NORTH);
        topPanel.add(menuPanel, BorderLayout.CENTER);
        add(topPanel, BorderLayout.NORTH);

        // Product Display Panel
        productDisplayPanel = new JPanel(new GridLayout(3, 3, 10, 10));
        productDisplayPanel.setBackground(Color.WHITE);
        productDisplayPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        contentPanel = new JPanel(new BorderLayout());
        contentPanel.setBackground(Color.WHITE);
        contentPanel.add(new JScrollPane(productDisplayPanel), BorderLayout.CENTER);
        add(contentPanel, BorderLayout.CENTER);

        loadProducts();
    }

    private void searchProducts() {
        String keyword = searchField.getText().trim().toLowerCase();
        if (keyword.isEmpty()) {
            loadProducts();
            return;
        }

        SanPhamDAO dao = new SanPhamDAO();
        ArrayList<SanPhamDTO> productList = dao.selectAll();
        productDisplayPanel.removeAll();

        int maxProducts = 9;
        int count = 0;
        for (SanPhamDTO sp : productList) {
            if (sp.getSoLuongTonKho() > 0 && count < maxProducts &&
                sp.getTenSanPham().toLowerCase().contains(keyword)) {
                addProductToView(sp);
                count++;
            }
        }

        while (count < maxProducts) {
            productDisplayPanel.add(new JPanel());
            count++;
        }

        productDisplayPanel.revalidate();
        productDisplayPanel.repaint();
    }

    private void setContent(JComponent component) {
        contentPanel.removeAll();
        contentPanel.add(component, BorderLayout.CENTER);
        contentPanel.revalidate();
        contentPanel.repaint();
    }

    private void showQuanAoGUI() {
        JFrame frame = new JFrame("Danh M·ª•c Qu·∫ßn √Åo");
        frame.setSize(600, 500);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.add(new QuanAoGUI());
        frame.setVisible(true);
    }

    private void showGiayDepGUI() {
        JFrame frame = new JFrame("Danh M·ª•c Gi√†y D√©p");
        frame.setSize(600, 500);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.add(new GiayDepGUI());
        frame.setVisible(true);
    }

    private void showPhuKienGUI() {
        JFrame frame = new JFrame("Danh M·ª•c Ph·ª• Ki·ªán");
        frame.setSize(600, 500);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.add(new PhuKienGUI());
        frame.setVisible(true);
    }

    private void showHotTrendContent() {
        BackgroundPanel backgroundPanel = new BackgroundPanel("anhnenHotTrend.jpg");
        backgroundPanel.setLayout(new BorderLayout());
        backgroundPanel.setPreferredSize(new Dimension(800, 600)); // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc

        // Panel con ƒë·ªÉ ch·ª©a n·ªôi dung v·ªõi n·ªÅn b√°n trong su·ªët
        JPanel contentSubPanel = new JPanel();
        contentSubPanel.setLayout(new BoxLayout(contentSubPanel, BoxLayout.Y_AXIS));
        contentSubPanel.setOpaque(true);
        contentSubPanel.setBackground(new Color(255, 255, 255, 200)); // Tr·∫Øng b√°n trong su·ªët
        contentSubPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Ti√™u ƒë·ªÅ ch√≠nh
        JLabel titleLabel = new JLabel("<html><h1 style='text-align: center; color: #2E8B57;'>Xu H∆∞·ªõng Th·ªùi Trang 2025</h1></html>");
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(titleLabel);
        contentSubPanel.add(Box.createVerticalStrut(20));

        // Ph·∫ßn gi·ªõi thi·ªáu
        JLabel introLabel = new JLabel("<html><p style='font-size: 14px; text-align: justify;'>" +
                "Kh√°m ph√° nh·ªØng xu h∆∞·ªõng th·ªùi trang n·ªïi b·∫≠t nh·∫•t nƒÉm 2025! T·ª´ phong c√°ch t·ªëi gi·∫£n, " +
                "s·∫Øc m√†u pastel nh·∫π nh√†ng ƒë·∫øn nh·ªØng thi·∫øt k·∫ø ƒë·∫≠m ch·∫•t t∆∞∆°ng lai v·ªõi ch·∫•t li·ªáu b·ªÅn v·ªØng. " +
                "D∆∞·ªõi ƒë√¢y l√† nh·ªØng g·ª£i √Ω gi√∫p b·∫°n lu√¥n d·∫´n ƒë·∫ßu xu h∆∞·ªõng.</p></html>");
        introLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(introLabel);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // Danh s√°ch xu h∆∞·ªõng
        JLabel trendsLabel = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>Top 5 Xu H∆∞·ªõng N·ªïi B·∫≠t</h2>" +
                "<ul style='font-size: 14px;'>" +
                "<li><b>Phong c√°ch T·ªëi Gi·∫£n (Minimalism)</b>: √Åo thun tr·∫Øng, qu·∫ßn √¢u ·ªëng su√¥ng k·∫øt h·ª£p v·ªõi ph·ª• ki·ªán tinh t·∫ø.</li>" +
                "<li><b>S·∫Øc m√†u Pastel</b>: Nh·ªØng gam m√†u nh·∫π nh√†ng nh∆∞ h·ªìng ph·∫•n, xanh mint ƒëang tr·ªü l·∫°i m·∫°nh m·∫Ω.</li>" +
                "<li><b>Ch·∫•t li·ªáu B·ªÅn V·ªØng</b>: S·ª≠ d·ª•ng v·∫£i t√°i ch·∫ø v√† ch·∫•t li·ªáu th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng.</li>" +
                "<li><b>Ph·ª• ki·ªán T∆∞∆°ng Lai</b>: K√≠nh m·∫Øt oversized, t√∫i x√°ch metallic v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o.</li>" +
                "<li><b>Layering ƒêa L·ªõp</b>: K·∫øt h·ª£p √°o len, √°o kho√°c d√†i v√† khƒÉn cho√†ng ƒë·ªÉ t·∫°o phong c√°ch c√° t√≠nh.</li>" +
                "</ul></html>");
        trendsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(trendsLabel);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // L·ªùi k·∫øt
        JLabel conclusionLabel = new JLabel("<html><p style='font-size: 14px; text-align: justify;'>" +
                "H√£y th·ª≠ ngay nh·ªØng xu h∆∞·ªõng n√†y ƒë·ªÉ l√†m m·ªõi phong c√°ch c·ªßa b·∫°n! ƒê·ª´ng qu√™n gh√© qua c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i ƒë·ªÉ t√¨m ki·∫øm nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t.</p></html>");
        conclusionLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(conclusionLabel);

        backgroundPanel.add(contentSubPanel, BorderLayout.CENTER);
        JScrollPane scrollPane = new JScrollPane(backgroundPanel);
        scrollPane.getVerticalScrollBar().setBackground(new Color(200, 230, 200)); // ƒê·∫∑t m√†u n·ªÅn cho thanh cu·ªôn
        scrollPane.getHorizontalScrollBar().setBackground(new Color(200, 230, 200));
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        setContent(scrollPane);
    }

    private void showBlogContent() {
        BackgroundPanel panel = new BackgroundPanel("anhnenTrangChu.jpg");
        panel.setLayout(new BorderLayout());
        panel.setPreferredSize(new Dimension(800, 600)); // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc

        // Panel con ƒë·ªÉ ch·ª©a n·ªôi dung v·ªõi n·ªÅn b√°n trong su·ªët
        JPanel contentSubPanel = new JPanel();
        contentSubPanel.setLayout(new BoxLayout(contentSubPanel, BoxLayout.Y_AXIS));
        contentSubPanel.setOpaque(true);
        contentSubPanel.setBackground(new Color(255, 255, 255, 200)); // Tr·∫Øng b√°n trong su·ªët
        contentSubPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Ti√™u ƒë·ªÅ ch√≠nh
        JLabel titleLabel = new JLabel("<html><h1 style='text-align: center; color: #2E8B57;'>Blog Th·ªùi Trang</h1></html>");
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(titleLabel);
        contentSubPanel.add(Box.createVerticalStrut(20));

        // B√†i vi·∫øt 1
        JLabel article1Label = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>1. C√°ch Ph·ªëi ƒê·ªì ƒêi L√†m NƒÉng ƒê·ªông</h2>" +
                "<p style='font-size: 14px; text-align: justify;'>" +
                "ƒêi l√†m kh√¥ng nh·∫•t thi·∫øt ph·∫£i nh√†m ch√°n! H√£y th·ª≠ k·∫øt h·ª£p m·ªôt chi·∫øc √°o s∆° mi tr·∫Øng v·ªõi qu·∫ßn √¢u ·ªëng su√¥ng, " +
                "th√™m m·ªôt ƒë√¥i gi√†y th·ªÉ thao tr·∫Øng ƒë·ªÉ t·∫°o ƒëi·ªÉm nh·∫•n nƒÉng ƒë·ªông. ƒê·ª´ng qu√™n m·ªôt chi·∫øc t√∫i tote ƒë·ªÉ ho√†n thi·ªán phong c√°ch.</p></html>");
        article1Label.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(article1Label);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // B√†i vi·∫øt 2
        JLabel article2Label = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>2. M√†u S·∫Øc N·ªïi B·∫≠t NƒÉm 2025</h2>" +
                "<p style='font-size: 14px; text-align: justify;'>" +
                "NƒÉm 2025 ƒë√°nh d·∫•u s·ª± tr·ªü l·∫°i c·ªßa c√°c gam m√†u pastel nh∆∞ h·ªìng ph·∫•n, xanh mint, v√† v√†ng nh·∫°t. Nh·ªØng m√†u s·∫Øc n√†y " +
                "kh√¥ng ch·ªâ mang l·∫°i c·∫£m gi√°c nh·∫π nh√†ng m√† c√≤n d·ªÖ d√†ng ph·ªëi ƒë·ªì cho m·ªçi d·ªãp, t·ª´ ƒëi l√†m ƒë·∫øn ƒëi ch∆°i.</p></html>");
        article2Label.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(article2Label);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // B√†i vi·∫øt 3
        JLabel article3Label = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>3. G·ª£i √ù Mix ƒê·ªì Theo Phong C√°ch H√†n Qu·ªëc</h2>" +
                "<p style='font-size: 14px; text-align: justify;'>" +
                "Phong c√°ch H√†n Qu·ªëc lu√¥n ƒë∆∞·ª£c y√™u th√≠ch v·ªõi s·ª± tr·∫ª trung v√† tinh t·∫ø. H√£y th·ª≠ m·ªôt chi·∫øc √°o len oversize k·∫øt h·ª£p v·ªõi " +
                "ch√¢n v√°y x·∫øp ly, th√™m m·ªôt ƒë√¥i b·ªët c·ªï ng·∫Øn v√† k√≠nh m·∫Øt trong su·ªët ƒë·ªÉ t·∫°o n√™n v·∫ª ngo√†i ƒë·∫≠m ch·∫•t K-style.</p></html>");
        article3Label.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(article3Label);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // B√†i vi·∫øt 4
        JLabel article4Label = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>4. C√°ch Ch·ªçn Ph·ª• Ki·ªán Cho Trang Ph·ª•c D·∫° H·ªôi</h2>" +
                "<p style='font-size: 14px; text-align: justify;'>" +
                "M·ªôt chi·∫øc v√°y d·∫° h·ªôi s·∫Ω tr·ªü n√™n n·ªïi b·∫≠t h∆°n khi b·∫°n ch·ªçn ƒë√∫ng ph·ª• ki·ªán. H√£y ∆∞u ti√™n nh·ªØng m√≥n ƒë·ªì nh∆∞ khuy√™n tai d√†i, " +
                "t√∫i clutch √°nh kim, v√† gi√†y cao g√≥t m≈©i nh·ªçn ƒë·ªÉ t·∫°o n√™n v·∫ª ngo√†i sang tr·ªçng v√† quy·∫øn r≈©.</p></html>");
        article4Label.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(article4Label);

        panel.add(contentSubPanel, BorderLayout.CENTER);
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.getVerticalScrollBar().setBackground(new Color(200, 230, 200)); // ƒê·∫∑t m√†u n·ªÅn cho thanh cu·ªôn
        scrollPane.getHorizontalScrollBar().setBackground(new Color(200, 230, 200));
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        setContent(scrollPane);
    }

    private void showCSKHContent() {
        BackgroundPanel panel = new BackgroundPanel("anhnendki.jpeg");
        panel.setLayout(new BorderLayout());
        panel.setPreferredSize(new Dimension(800, 600)); // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc

        // Panel con ƒë·ªÉ ch·ª©a n·ªôi dung v·ªõi n·ªÅn b√°n trong su·ªët
        JPanel contentSubPanel = new JPanel();
        contentSubPanel.setLayout(new BoxLayout(contentSubPanel, BoxLayout.Y_AXIS));
        contentSubPanel.setOpaque(true);
        contentSubPanel.setBackground(new Color(255, 255, 255, 200)); // Tr·∫Øng b√°n trong su·ªët
        contentSubPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Ti√™u ƒë·ªÅ ch√≠nh
        JLabel titleLabel = new JLabel("<html><h1 style='text-align: center; color: #2E8B57;'>H·ªó Tr·ª£ Kh√°ch H√†ng</h1></html>");
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(titleLabel);
        contentSubPanel.add(Box.createVerticalStrut(20));

        // Th√¥ng tin li√™n h·ªá
        JLabel contactLabel = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>Li√™n H·ªá V·ªõi Ch√∫ng T√¥i</h2>" +
                "<p style='font-size: 14px;'>" +
                "<b>Hotline:</b> 1900 123 456 (8:00 - 22:00, Th·ª© 2 - Ch·ªß Nh·∫≠t)<br>" +
                "<b>Email:</b> hotro@fashionstore.vn<br>" +
                "<b>ƒê·ªãa ch·ªâ:</b> 123 ƒê∆∞·ªùng Th·ªùi Trang, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh<br>" +
                "<b>Facebook:</b> <a href='#'>fb.com/fashionstore</a><br>" +
                "<b>Instagram:</b> <a href='#'>@fashionstore.vn</a></p></html>");
        contactLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(contactLabel);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // Ch√≠nh s√°ch h·ªó tr·ª£
        JLabel policyLabel = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>Ch√≠nh S√°ch H·ªó Tr·ª£</h2>" +
                "<ul style='font-size: 14px;'>" +
                "<li><b>ƒê·ªïi tr·∫£:</b> H·ªó tr·ª£ ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m l·ªói ho·∫∑c kh√¥ng ƒë√∫ng m√¥ t·∫£.</li>" +
                "<li><b>Giao h√†ng:</b> Mi·ªÖn ph√≠ giao h√†ng to√†n qu·ªëc cho ƒë∆°n t·ª´ 500.000 VNƒê.</li>" +
                "<li><b>B·∫£o h√†nh:</b> B·∫£o h√†nh 30 ng√†y cho c√°c s·∫£n ph·∫©m ph·ª• ki·ªán.</li>" +
                "</ul></html>");
        policyLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(policyLabel);
        contentSubPanel.add(Box.createVerticalStrut(15));

        // C√¢u h·ªèi th∆∞·ªùng g·∫∑p
        JLabel faqLabel = new JLabel("<html>" +
                "<h2 style='color: #2E8B57;'>C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</h2>" +
                "<p style='font-size: 14px;'>" +
                "<b>Q: L√†m th·∫ø n√†o ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng?</b><br>" +
                "A: B·∫°n c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng qua email x√°c nh·∫≠n ho·∫∑c li√™n h·ªá hotline.<br><br>" +
                "<b>Q: T√¥i c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng kh√¥ng?</b><br>" +
                "A: ƒê∆°n h√†ng c√≥ th·ªÉ h·ªßy trong v√≤ng 2 gi·ªù sau khi ƒë·∫∑t. Vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i.</p></html>");
        faqLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        contentSubPanel.add(faqLabel);

        panel.add(contentSubPanel, BorderLayout.CENTER);
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.getVerticalScrollBar().setBackground(new Color(200, 230, 200)); // ƒê·∫∑t m√†u n·ªÅn cho thanh cu·ªôn
        scrollPane.getHorizontalScrollBar().setBackground(new Color(200, 230, 200));
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        setContent(scrollPane);
    }

    private void loadProducts() {
        SanPhamDAO dao = new SanPhamDAO();
        ArrayList<SanPhamDTO> productList = dao.selectAll();
        productDisplayPanel.removeAll();

        if (productList == null || productList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m!", "L·ªói", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int maxProducts = 9;
        int count = 0;
        for (SanPhamDTO sp : productList) {
            if (sp.getSoLuongTonKho() > 0 && count < maxProducts) {
                addProductToView(sp);
                count++;
            }
        }

        while (count < maxProducts) {
            productDisplayPanel.add(new JPanel());
            count++;
        }

        productDisplayPanel.revalidate();
        productDisplayPanel.repaint();
    }

    public void addProductToView(SanPhamDTO sp) {
        JPanel productPanel = new JPanel(new BorderLayout());
        productPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        productPanel.setBackground(Color.WHITE);
        productPanel.putClientProperty("idSanPham", sp.getIdSanPham());

        JLabel imageLabel;
        try {
            if (sp.getHinhAnh() != null && !sp.getHinhAnh().isEmpty()) {
                ImageIcon icon = new ImageIcon(sp.getHinhAnh());
                if (icon.getImageLoadStatus() == MediaTracker.COMPLETE) {
                    Image scaledImage = icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                    imageLabel = new JLabel(new ImageIcon(scaledImage));
                } else {
                    imageLabel = new JLabel("Invalid Image", SwingConstants.CENTER);
                }
            } else {
                imageLabel = new JLabel("No Image", SwingConstants.CENTER);
            }
        } catch (Exception e) {
            imageLabel = new JLabel("Error Loading Image", SwingConstants.CENTER);
            e.printStackTrace();
        }

        JLabel nameLabel = new JLabel(sp.getTenSanPham(), SwingConstants.CENTER);
        nameLabel.setFont(new Font("Serif", Font.BOLD, 14));

        productPanel.add(imageLabel, BorderLayout.CENTER);
        productPanel.add(nameLabel, BorderLayout.SOUTH);

        productDisplayPanel.add(productPanel);
    }

    public void removeProductFromView(String idSanPham) {
        for (Component comp : productDisplayPanel.getComponents()) {
            if (comp instanceof JPanel) {
                JPanel productPanel = (JPanel) comp;
                String panelId = (String) productPanel.getClientProperty("idSanPham");
                if (idSanPham.equals(panelId)) {
                    productDisplayPanel.remove(productPanel);
                    break;
                }
            }
        }
        productDisplayPanel.revalidate();
        productDisplayPanel.repaint();
        loadProducts();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new NguoiDungGUI().setVisible(true));
    }
}